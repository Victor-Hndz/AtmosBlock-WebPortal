name: Build

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Clonaci칩n completa para mejor an치lisis

      # Instalar Python y herramientas para an치lisis Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # o cualquier linter que uses

      # Instalar herramientas para C
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang

      # Install C dependencies
      - name: Install C dependencies
        run: |
          sudo apt-get install -y cmake ansible git libcurl4-openssl-dev libnetcdf-dev m4 mpich wget
          cd custom_images/netcdf-base/execution
          ansible-playbook install_netcdf.yaml
          export HDF5_DIR=/usr/local/hdf5-1.14.3
          export NETCDF4_DIR=/usr/local
          
      - name: Compile C code
        run: |
          cd backend/FAST-IBAN_Project/execution/code/
          mkdir -p build
          cd build
          cmake ..
          cmake --build .
          make clean all

      - name: Run build-wrapper on C code
        run: |
          ./build-wrapper-linux-x86/build-wrapper-linux-x86-64 \
            --out-dir bw-output \
            make clean all -C backend/FAST-IBAN_Project/execution/code/build

      # Ejecutar an치lisis SonarQube con el token
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
