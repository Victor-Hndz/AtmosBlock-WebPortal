services:
  nest_api:
    build:
      context: ./backend/nestjs
      dockerfile: Dockerfile
    container_name: nest_api_container
    env_file:
      - .env
    environment:
      DB_HOST: postgres
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app-network

  configurator_module:
    build:
      context: ./backend/FAST-IBAN_Project/
      dockerfile: ./configurator/Dockerfile
      args:
        CDSAPI_URL: ${CDSAPI_URL}
        CDSAPI_KEY: ${CDSAPI_KEY}
    container_name: configurator_container
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - config_data:/app/config
    stdin_open: true
    tty: true
    working_dir: /app
    networks:
      - app-network

  handler_module:
    build:
      context: ./backend/FAST-IBAN_Project/
      dockerfile: ./handler/Dockerfile
    container_name: handler_container
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - configurator_module
    volumes:
      - config_data:/app/config
    stdin_open: true
    tty: true
    working_dir: /app
    networks:
      - app-network

  execution_module:
    build:
      context: ./backend/FAST-IBAN_Project/
      dockerfile: ./execution/Dockerfile
    container_name: execution_container
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - configurator_module
      - handler_module
    volumes:
      - config_data:/app/config
      - out_data:/app/out
    stdin_open: true
    tty: true
    working_dir: /app
    networks:
      - app-network

  # visualization_module:
  #   build:
  #     context: ./backend/FAST-IBAN_Project/
  #     dockerfile: ./visualization/Dockerfile
  #   container_name: visualization_container
  #   volumes:
  #     - ./backend/FAST-IBAN_Project:/app
  #     - out_data:/app/out
  #   stdin_open: true
  #   tty: true
  #   working_dir: /app

  # tracking_module:
  #   build:
  #     context: ./backend/FAST-IBAN_Project/
  #     dockerfile: ./tracking/Dockerfile
  #   container_name: tracking_container
  #   volumes:
  #     - ./backend/FAST-IBAN_Project:/app
  #     - out_data:/app/out
  #   stdin_open: true
  #   tty: true
  #   working_dir: /app

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    env_file:
      - .env
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
      - ${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres_container
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/nestjs/db/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-postgres:
    image: postgres:16
    container_name: init_postgres_container
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/db:/docker-entrypoint-initdb.d
    networks:
      - app-network
    restart: "no"
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        PGPASSWORD=${DB_PASSWORD} psql -h postgres -U ${DB_USERNAME} -d ${DB_NAME} -f /docker-entrypoint-initdb.d/init-db.sql
      "

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres_container
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set local http://${MINIO_ENDPOINT} ${MINIO_USER} ${MINIO_PASSWORD} &&
        mc mb local/${MINIO_BUCKET}
      "

  cron-cleanup:
    build:
      context: ./cronjob-cleanup
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - TZ=Europe/Madrid

volumes:
  out_data:
    driver: local
  config_data:
    driver: local
  rabbitmq_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  app-network:
    driver: bridge
